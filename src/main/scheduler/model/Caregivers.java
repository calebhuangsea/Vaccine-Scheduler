package scheduler.model;

import scheduler.db.ConnectionManager;
import scheduler.util.Util;

import java.sql.*;
import java.util.Arrays;

public class Caregivers {

    private final String username;
    private final byte[] salt;
    private final byte[] hash;

    /**
     * construct a Caregiver using CaregiverBuilder
     * @param builder a CaregiverBuilder object
     */
    private Caregivers(CaregiverBuilder builder) {
        this.username = builder.username;
        this.salt = builder.salt;
        this.hash = builder.hash;
    }

    /**
     * construct a Caregiver using CaregiverGetter
     * @param getter a CaregiverGetter object
     */
    private Caregivers(CaregiverGetter getter) {
        this.username = getter.username;
        this.salt = getter.salt;
        this.hash = getter.hash;
    }

    // Getters
    public String getUsername() {
        return username;
    }

    /**
     * to save a new Caregiver to our Caregiver table
     * @throws SQLException sql execution exception
     */
    public void saveToDB() throws SQLException {
        ConnectionManager cm = new ConnectionManager();
        Connection con = cm.createConnection();

        String addCaregiver = "INSERT INTO Caregivers VALUES (? , ?, ?)";
        try {
            PreparedStatement statement = con.prepareStatement(addCaregiver);
            statement.setString(1, this.username);
            statement.setBytes(2, this.salt);
            statement.setBytes(3, this.hash);
            statement.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
            throw new SQLException("Error occurred when creating new Caregiver! Failed!");
        } finally {
            cm.closeConnection();
        }
    }

    /**
     * Allow a Caregiver to upload date that he/she is available to our database
     * @param d the date a Caregiver pass in
     * @throws SQLException sql execution exception
     */
    public void uploadAvailability(Date d) throws SQLException {
        new Availabilities().upLoadAvailability(this.username, d);
    }

    /**
     * The CaregiverBuilder class is what we use to build a new Caregiver
     * when someone is creating a new Caregiver
     */
    public static class CaregiverBuilder {

        private final String username;
        private final byte[] salt;
        private final byte[] hash;

        /**
         * Construct a CaregiverBuilder using username and password(salt and hash)
         * @param username username
         * @param salt salt generated randomly
         * @param hash has generated randomly by password and salt
         */
        public CaregiverBuilder(String username, byte[] salt, byte[] hash) {
            this.username = username;
            this.salt = salt;
            this.hash = hash;
        }

        /**
         * get a new Caregiver
         * @return a new Caregiver generated by CaregiverBuilder
         */
        public Caregivers build() {
            return new Caregivers(this);
        }
    }

    /**
     * CaregiverGetter is used when a user tries to login as a Caregiver
     */
    public static class CaregiverGetter {
        private final String username;
        private final String password;
        private byte[] salt;
        private byte[] hash;

        /**
         * Construct a CaregiverGetter with username and password
         * @param username
         * @param password
         */
        public CaregiverGetter(String username, String password) {
            this.username = username;
            this.password = password;
        }

        /**
         * Check whether we can find a caregiver with given username and password
         * @return a Caregiver with correct username and password
         *          null when password mismatch
         * @throws SQLException sql execution exception
         */
        public Caregivers get() throws SQLException {
            ConnectionManager cm = new ConnectionManager();
            Connection con = cm.createConnection();

            String getCaregiver = "SELECT Salt, Hash FROM Caregivers WHERE Username = ?";
            try {
                PreparedStatement statement = con.prepareStatement(getCaregiver);
                statement.setString(1, this.username);
                ResultSet resultSet = statement.executeQuery();
                while (resultSet.next()) {
                    byte[] salt = resultSet.getBytes("Salt");
                    // we need to call Util.trim() to get rid of the paddings,
                    // try to remove the use of Util.trim() and you'll see :)
                    byte[] hash = Util.trim(resultSet.getBytes("Hash"));
                    // check if the password matches
                    byte[] calculatedHash = Util.generateHash(password, salt);
                    if (!Arrays.equals(hash, calculatedHash)) {
                        return null;
                    } else {
                        this.salt = salt;
                        this.hash = hash;
                        return new Caregivers(this);
                    }
                }
                return null;
            } catch (SQLException e) {
                e.printStackTrace();
                throw new SQLException("Error occurred when getting caregiver's information!");
            } finally {
                cm.closeConnection();
            }
        }
    }
}
